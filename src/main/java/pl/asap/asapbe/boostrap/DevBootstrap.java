package pl.asap.asapbe.boostrap;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationListener;
import org.springframework.context.event.ContextRefreshedEvent;
import org.springframework.stereotype.Component;
import pl.asap.asapbe.entities.*;
import pl.asap.asapbe.repositories.ProjectRepository;
import pl.asap.asapbe.repositories.TaskRepository;
import pl.asap.asapbe.repositories.UserAuthDetailsRepository;
import pl.asap.asapbe.repositories.UserRepository;
import pl.asap.asapbe.services.AuthServiceImpl;

import java.util.HashSet;
import java.util.Set;

@Component
@Slf4j
public class DevBootstrap implements ApplicationListener<ContextRefreshedEvent> {

    private UserRepository userRepository;
    private TaskRepository taskRepository;
    private ProjectRepository projectRepository;
    private UserAuthDetailsRepository userAuthDetailsRepository;
    private AuthServiceImpl authServiceImpl;

    @Autowired
    public DevBootstrap(UserRepository userRepository, TaskRepository taskRepository, ProjectRepository projectRepository, UserAuthDetailsRepository userAuthRepository, AuthServiceImpl authServiceImpl) {
        this.userRepository = userRepository;
        this.taskRepository = taskRepository;
        this.projectRepository = projectRepository;
        this.userAuthDetailsRepository = userAuthRepository;
        this.authServiceImpl = authServiceImpl;
    }

    private void init() {

        //school project
        ProjectEntity school_project = new ProjectEntity("School project");
        UserEntity marek = new UserEntity("Marek", "Kowalski", "marek_kowalski@gmail.com", authServiceImpl.encryptPassword("qwerty123"));
        UserEntity krzysztof = new UserEntity("Krzysztof", "Nowak", "krzysztof_nowak@gmail.com", authServiceImpl.encryptPassword("password321"));
        UserEntity patryk = new UserEntity("Patryk", "Kopiec", "patryk_kopiec@gmail.com", authServiceImpl.encryptPassword("password123"));
        TaskEntity taskInitRepo = new TaskEntity("Init repository", "Create repository and create corresponding project", Status.OPEN, Priority.HIGH);
        TaskEntity taskCreateDb = new TaskEntity("createDatabase", "Create database and Entity classes", Status.OPEN, Priority.HIGH);
        UserAuthDetailsEntity marekUserAuthDetails = new UserAuthDetailsEntity(authServiceImpl.generateToken());
        UserAuthDetailsEntity krzysztofUserAuthDetails = new UserAuthDetailsEntity(authServiceImpl.generateToken());
        UserAuthDetailsEntity patrykUserAuthDetails = new UserAuthDetailsEntity(authServiceImpl.generateToken());

        //binding tasks with users
        taskInitRepo.setAssignee(krzysztof);
        taskCreateDb.setAssignee(marek);

        //binding users and tasks to project
        Set<UserEntity> allUsers = new HashSet<>();
        allUsers.add(marek);
        allUsers.add(krzysztof);
        allUsers.add(patryk);

        Set<TaskEntity> allTasks = new HashSet<>();
        allTasks.add(taskInitRepo);
        allTasks.add(taskCreateDb);

        school_project.setSupervisor(marek);
        school_project.setUsers(allUsers);
        school_project.setTasks(allTasks);

        //saving data to database
        log.info("saving data to database");
        UserEntity marekEntity = userRepository.save(marek);
        UserEntity krzysztofEntity = userRepository.save(krzysztof);
        UserEntity patrykEntity = userRepository.save(patryk);

        //setting data generated by DB
        marekUserAuthDetails.setUserId(marekEntity.getId());
        krzysztofUserAuthDetails.setUserId(krzysztofEntity.getId());
        patrykUserAuthDetails.setUserId(patrykEntity.getId());

        //saving auth details
        userAuthDetailsRepository.save(marekUserAuthDetails);
        userAuthDetailsRepository.save(krzysztofUserAuthDetails);
        userAuthDetailsRepository.save(patrykUserAuthDetails);
        ProjectEntity projectEntity = projectRepository.save(school_project);

        //setting projects to tasks since it is bidirectional relation
        taskCreateDb.setProject(projectEntity);
        taskInitRepo.setProject(projectEntity);

        taskRepository.save(taskCreateDb);
        taskRepository.save(taskInitRepo);
    }

    @Override
    public void onApplicationEvent(ContextRefreshedEvent event) {
        init();
    }
}
